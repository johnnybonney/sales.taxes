
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #' Author: John Bonney
> #'
> #' This file creates event-study plots based on the tax-inclusive price indices.
> #' It is an adaptation of explore_pi_pre_trends that keeps the product-modules
> #' the same when creating the "pseudo-control" groups.
> 
> library(data.table)
> library(readstata13)
> library(sales.taxes)
Warning message:
replacing previous import ‘mltools::replace_na’ by ‘tidyr::replace_na’ when loading ‘sales.taxes’ 
> library(zoo)

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(ggplot2)
> 
> setwd("/project2/igaarder")
> prep_enviro <- F
> make.ct <- F
> combine.tax.rates <- F
> 
> ################################################################################
> ###### Prepare environment & create datasets of all goods and taxable only #####
> ################################################################################
> 
> ## useful filepaths ------------------------------------------------------------
> eventstudy_tr_path <- "Data/event_study_tr_groups_comprehensive.csv"
> tr_groups_path <- "Data/tr_groups_comprehensive.csv"
> sales_data_path <- "Data/sales_quarterly_2006-2016.csv"
> tax_rates_path <- "Data/county_monthly_tax_rates.csv"
> quarterly_tax_path <- "Data/quarterly_tax_rates.csv"
> module_exemptions_path <- "Data/modules_exemptions_long.csv"
> all_goods_pi_path <- "Data/Nielsen/price_quantity_indices_allitems.csv"
> taxable_pi_path <- "Data/Nielsen/price_quantity_indices_taxableitems.csv"
> 
> if (combine.tax.rates) {
+   all.tax <- data.table(NULL)
+   for (year in 2008:2014) {
+     tax.filepath <- paste0(
+       "Data/Nielsen/Sales_weighted_tax_rate_year_", year, ".dta"
+       )
+     tax.dt <- as.data.table(read.dta13(tax.filepath))
+     all.tax <- rbind(all.tax, tax.dt)
+   }
+   fwrite(all.tax, quarterly_tax_path)
+ }
> 
> if (prep_enviro){
+   ## create .csv's of taxable and all goods ------------------------------------
+   nonfood_pi <- read.dta13("Data/Nielsen/Price_quantity_indices_nonfood.dta")
+   nonfood_pi <- as.data.table(nonfood_pi)
+   fwrite(nonfood_pi, "Data/Nielsen/price_quantity_indices_nonfood.csv")
+ 
+   food_pi <- fread("Data/Nielsen/price_quantity_indices_food.csv")
+   food_pi[, c("fips_state", "fips_county") := NULL]
+ 
+   all_pi <- rbind(food_pi, nonfood_pi)
+   all_pi <- all_pi[year %in% 2008:2014]
+   rm(nonfood_pi, food_pi)
+   gc()
+ 
+   ### attach county and state FIPS codes, sales, and tax rates -----------------
+   sales_data <- fread(sales_data_path)
+   sales_data <- sales_data[, .(store_code_uc, product_module_code, fips_county,
+                                fips_state, quarter, year, sales)]
+   sales_data <- sales_data[year %in% 2008:2014]
+ 
+   all_pi <- merge(all_pi, sales_data, by = c("store_code_uc", "quarter", "year",
+                                              "product_module_code" ))
+   rm(sales_data)
+   gc()
+ 
+   if (!combine.tax.rates) {
+     all.tax <- fread(quarterly_tax_path)
+   }
+   all_pi <- merge(all_pi, all.tax, by = c("store_code_uc", "product_module_code",
+                                           "year", "quarter", "product_group_code"))
+ 
+   fwrite(all_pi, all_goods_pi_path)
+ 
+   rm(all.tax)
+   gc()
+ 
+   ### create taxable only dataset ----------------------------------------------
+   taxable_pi <- all_pi[sales_tax > 1]
+   fwrite(taxable_pi, taxable_pi_path)
+ 
+ }  else if (make.ct) {
+   all_pi <- fread(all_goods_pi_path)
+   taxable_pi <- fread(taxable_pi_path)
+ }
> 
> 
> ################################################################################
> ############## Plots by Calendar Time (taxable and all goods) ##################
> ################################################################################
> if (make.ct) {
+ # All goods ====================================================================
+ 
+ ## balance sample on store-level from 2008 to 2014 -----------------------------
+ all_pi <- all_pi[year %in% 2008:2014 & !is.na(cpricei)]
+ all_pi <- all_pi[year %in% 2009:2014 | quarter %in% 2:4 | !is.na(sales)]
+ all_pi <- balance_panel_data(all_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
+ 
+ ## normalize price index -------------------------------------------------------
+ price_base <- all_pi[year == 2008 & quarter == 1]
+ price_base <- price_base[, .(store_code_uc, product_module_code, cpricei, sales)]
+ price_base[, base.cpricei := cpricei]
+ price_base[, cpricei := NULL]
+ price_base[, base.sales := sales]
+ price_base[, sales := NULL]
+ 
+ all_pi <- merge(all_pi, price_base, by = c("store_code_uc", "product_module_code"))
+ all_pi[, normalized.cpricei := log(cpricei) - log(base.cpricei)]
+ all_pi[, base.cpricei := NULL]
+ all_pi[, sales := NULL]
+ 
+ rm(price_base)
+ gc()
+ 
+ ## merge treatment -------------------------------------------------------------
+ all_pi <- merge_treatment(original_data = all_pi,
+                           treatment_data_path = tr_groups_path,
+                           time = "calendar",
+                           merge_by = c("fips_county", "fips_state"))
+ 
+ ## aggregate across treatment groups -------------------------------------------
+ 
+ all_pi_collapsed <- all_pi[, list(
+   mean.cpricei = weighted.mean(x = normalized.cpricei, w = base.sales),
+   n_counties = uniqueN(1000 * fips_state + fips_county)
+   ), by = c("tr_group", "year", "quarter")]
+ 
+ all_pi_collapsed <- add_tr_count(collapsed_data = all_pi_collapsed,
+                                  tr_group_name = "tr_group",
+                                  count_col_name = "n_counties")
+ fwrite(all_pi_collapsed, "Data/pi_all_calendar.csv")
+ 
+ ## prepare plot-----------------------------------------------------------------
+ all_pi_collapsed$year_qtr <- as.yearqtr(paste(
+   as.integer(all_pi_collapsed$year), as.integer(all_pi_collapsed$quarter)
+   ), "%Y %q")
+ 
+ all.calendar.plot <- ggplot(data = all_pi_collapsed, mapping = aes(x = year_qtr,
+                                                            y = mean.cpricei,
+                                                            color = tr_count)) +
+   labs(x = "Quarter", y = "Mean normalized ln(index)", color = "Sales tax change",
+        caption = "Weighted by sales in 2008 Q1.") +
+   scale_x_yearqtr(format = "%Y Q%q") +
+   geom_line() +
+   theme_bw()
+ 
+ ggsave("Graphs/pi_all_calendar.png")
+ 
+ # Taxable goods ================================================================
+ 
+ ## balance sample on store-level from 2008 to 2014 -----------------------------
+ taxable_pi <- taxable_pi[year %in% 2008:2014 & !is.na(cpricei)]
+ taxable_pi <- taxable_pi[year %in% 2009:2014 | quarter %in% 2:4 | !is.na(sales)]
+ taxable_pi <- balance_panel_data(taxable_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
+ 
+ ## normalize price index -------------------------------------------------------
+ price_base <- taxable_pi[year == 2008 & quarter == 1]
+ price_base <- price_base[, .(store_code_uc, product_module_code, cpricei, sales)]
+ price_base[, base.cpricei := cpricei]
+ price_base[, cpricei := NULL]
+ price_base[, base.sales := sales]
+ price_base[, sales := NULL]
+ 
+ taxable_pi <- merge(taxable_pi, price_base, by = c("store_code_uc", "product_module_code"))
+ taxable_pi[, normalized.cpricei := log(cpricei) - log(base.cpricei)]
+ taxable_pi[, base.cpricei := NULL]
+ taxable_pi[, sales := NULL]
+ 
+ rm(price_base)
+ gc()
+ 
+ ## merge treatment -------------------------------------------------------------
+ taxable_pi <- merge_treatment(original_data = taxable_pi,
+                               treatment_data_path = tr_groups_path,
+                               time = "calendar",
+                               merge_by = c("fips_county", "fips_state"))
+ 
+ 
+ ## aggregate across treatment groups -------------------------------------------
+ 
+ taxable_pi_collapsed <- taxable_pi[, list(
+   mean.cpricei = weighted.mean(x = normalized.cpricei, w = base.sales),
+   n_counties = uniqueN(1000 * fips_state + fips_county)
+ ), by = c("tr_group", "year", "quarter")]
+ 
+ taxable_pi_collapsed <- add_tr_count(collapsed_data = taxable_pi_collapsed,
+                                      tr_group_name = "tr_group",
+                                      count_col_name = "n_counties")
+ fwrite(taxable_pi_collapsed, "Data/taxable_pi_collapsed.csv")
+ 
+ ## prepare plot-----------------------------------------------------------------
+ taxable_pi_collapsed$year_qtr <- as.yearqtr(paste(
+   as.integer(taxable_pi_collapsed$year), as.integer(taxable_pi_collapsed$quarter)
+ ), "%Y %q")
+ 
+ taxable.calendar.plot <- ggplot(taxable_pi_collapsed, aes(x = year_qtr,
+                                                           y = mean.cpricei,
+                                                           color = tr_count)) +
+   labs(x = "Quarter", y = "Mean normalized ln(index)", color = "Sales tax change",
+        caption = "Weighted by sales in 2008 Q1.") +
+   scale_x_yearqtr(format = "%Y Q%q") +
+   geom_line() +
+   theme_bw()
+ 
+ ggsave("Graphs/pi_taxable_calendar.png")
+ 
+ rm(all_pi, taxable_pi)
+ gc()
+ 
+ }
> ################################################################################
> ################ Plots by Event Time (taxable and all goods) ###################
> ################################################################################
> 
> # All goods ====================================================================
> all_pi <- fread(all_goods_pi_path)
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> all_pi <- all_pi[year %in% 2008:2014 & !is.na(cpricei)]
> 
> base_sales <- all_pi[year == 2008 & quarter == 1]
> base_sales[, base.sales := sales]
> base_sales <- base_sales[, .(store_code_uc, product_module_code, base.sales)]
> 
> all_pi <- merge(all_pi, base_sales, by = c("store_code_uc", "product_module_code"))
> all_pi[, sales := NULL]
> all_pi <- all_pi[!is.na(base.sales)]
> 
> rm(base_sales)
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1565077    83.6    2910017   155.5    2910017   155.5
Vcells 1675724586 12784.8 4294919376 32767.7 4258756751 32491.8
> 
> all_pi <- balance_panel_data(all_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(all_pi, time_vars = c("quarter", "year"),  :
  12679688 out of 158883668 observations dropped when balancing panel
> 
> all_pi[, cpricei := log(cpricei)]
> all_pi[, sales_tax := log(sales_tax)]
> 
> all_pi_original <- copy(all_pi)
> 
> ## merge treatment, attach event times -----------------------------------------
> all_pi <- merge_treatment(original_data = all_pi,
+                           treatment_data_path = eventstudy_tr_path,
+                           merge_by = c("fips_county", "fips_state"))
> 
> setnames(all_pi, "V1", "event_ID")
> 
> ## define time to event --------------------------------------------------------
> all_pi[, ref_quarter := ceiling(ref_month / 3)]
> all_pi[, tt_event := as.integer(4 * year + quarter -
+                                    (4 * ref_year + ref_quarter))]
> 
> ## limit data to two year window around reform ---------------------------------
> all_pi <- all_pi[tt_event >= -4 & tt_event <= 4]
> 
> ## add pseudo-control group ----------------------------------------------------
> 
> ### create unique dataset of never treated counties
> control_counties <- fread(tr_groups_path)
> control_counties <- control_counties[tr_group == "No change"]
> control_counties <- unique(control_counties[, .(fips_county, fips_state)])
> control_dt <- merge(all_pi_original, control_counties,
+                     by = c("fips_state", "fips_county"))
> 
> rm(all_pi_original, base_sales)
Warning message:
In rm(all_pi_original, base_sales) : object 'base_sales' not found
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1573494    84.1    2910017   155.5    2910017   155.5
Vcells 1664844260 12701.8 7524505221 57407.5 9399631345 71713.5
> 
> ### take the mean for each time period for each product module code
> control_dt <- control_dt[,
+                          list(control.cpricei = weighted.mean(cpricei, w = base.sales),
+                               control.sales_tax = weighted.mean(sales_tax, w = base.sales)),
+                          by = .(quarter, year, product_module_code)
+                          ]
> 
> matched_control_data <- merge(all_pi, control_dt, by = c("quarter", "year", "product_module_code"))
> matched_control_data <- matched_control_data[, .(control.cpricei, tt_event, event_ID,
+                                                  store_code_uc, product_module_code,
+                                                  tr_group, base.sales, ref_year,
+                                                  ref_quarter, control.sales_tax)]
> 
> matched_control_data[, cpricei := control.cpricei]
> matched_control_data[, sales_tax := control.sales_tax]
> matched_control_data[, tr_group := paste0("No change (", tolower(tr_group), ")")]
> matched_control_data[, control.cpricei := NULL]
> matched_control_data[, control.sales_tax := NULL]
> 
> all_pi <- rbind(all_pi, matched_control_data, fill = T)
> 
> ## normalize price indices based on time to event ------------------------------
> price_anchors <- all_pi[tt_event == -2]
> price_anchors[, base_price := cpricei]
> price_anchors <- price_anchors[, .(store_code_uc, product_module_code, base_price,
+                                    ref_year, ref_quarter, tr_group, event_ID)]
> 
> all_pi <- merge(all_pi, price_anchors,
+                     by = c("store_code_uc", "product_module_code",
+                            "ref_year", "ref_quarter", "tr_group", "event_ID"))
> 
> # note that this is still log cpricei
> all_pi[, normalized.cpricei := cpricei - base_price]
> all_pi[, base_price := NULL]
> 
> ## aggregate by treatment group ------------------------------------------------
> all_pi_es_collapsed <- all_pi[,
+   list(mean_pi = weighted.mean(normalized.cpricei, w = base.sales),
+        mean_tax = weighted.mean(sales_tax, w = base.sales),
+        n_counties = uniqueN(1000 * fips_state + fips_county),
+        n_stores = uniqueN(store_code_uc)),
+    by = c("tr_group", "tt_event")
+   ]
> 
> all_pi_es_collapsed <- add_tr_count(collapsed_data = all_pi_es_collapsed,
+                                     tr_group_name = "tr_group",
+                                     count_col_name = "n_counties")
> 
> fwrite(all_pi_es_collapsed, "Data/pi_allgoods_es.csv")
> 
> rm(all_pi)
> gc()
            used   (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells   1641838   87.7    2910017   155.5    2910017   155.5
Vcells 746963023 5698.9 6019604176 45926.0 9399631345 71713.5
> 
> stop()
Error: 
Execution halted
