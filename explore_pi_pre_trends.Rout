
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #' Author: John Bonney
> #'
> #' This file creates event-study plots based on the tax-inclusive price indices.
> #'
> #' TODO:
> #'  * Do same thing using Brad and David's package?
> 
> # devtools::install_github("setzler/eventStudy/eventStudy")
> 
> # library(eventStudy)
> library(data.table)
> library(readstata13)
> library(sales.taxes)
Warning message:
replacing previous import ‘mltools::replace_na’ by ‘tidyr::replace_na’ when loading ‘sales.taxes’ 
> library(zoo)

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> library(ggplot2)
> 
> setwd("/project2/igaarder")
> prep_enviro <- F
> make.ct <- T
> 
> ################################################################################
> ###### Prepare environment & create datasets of all goods and taxable only #####
> ################################################################################
> 
> ## useful filepaths ------------------------------------------------------------
> eventstudy_tr_path <- "Data/event_study_tr_groups_comprehensive.csv"
> tr_groups_path <- "Data/tr_groups_comprehensive.csv"
> sales_data_path <- "Data/sales_quarterly_2006-2016.csv"
> tax_rates_path <- "Data/county_monthly_tax_rates.csv"
> module_exemptions_path <- "/project2/igaarder/Data/modules_exemptions_long.csv"
> all_goods_pi_path <- "Data/Nielsen/price_quantity_indices_allitems.csv"
> taxable_pi_path <- "Data/Nielsen/price_quantity_indices_taxableitems.csv"
> 
> if (prep_enviro){
+   ## create .csv's of taxable and all goods ------------------------------------
+   nonfood_pi <- read.dta13("Data/Nielsen/Price_quantity_indices_nonfood.dta")
+   nonfood_pi <- as.data.table(nonfood_pi)
+   fwrite(nonfood_pi, "Data/Nielsen/price_quantity_indices_nonfood.csv")
+ 
+   food_pi <- fread("Data/Nielsen/price_quantity_indices_food.csv")
+   food_pi[, c("fips_state", "fips_county") := NULL]
+ 
+   all_pi <- rbind(food_pi, nonfood_pi)
+   rm(nonfood_pi, food_pi)
+   gc()
+ 
+   ### attach county and state FIPS codes as well as sales ----------------------
+   sales_data <- fread(sales_data_path)
+   sales_data <- sales_data[, .(store_code_uc, product_module_code, fips_county,
+                                fips_state, quarter, year, sales)]
+ 
+   all_pi <- merge(all_pi, sales_data, by = c("store_code_uc", "quarter", "year",
+                                              "product_module_code" ))
+   fwrite(all_pi, all_goods_pi_path)
+ 
+   rm(sales_data)
+   gc()
+ 
+   ### create taxable only dataset ----------------------------------------------
+   taxable_pi <- all_pi[year %in% 2008:2014]
+ 
+   county_monthly_tax <- fread(tax_rates_path)
+   module_exemptions <- fread(module_exemptions_path)
+ 
+   county_monthly_tax <- county_monthly_tax[, .(fips_state, fips_county, year,
+                                                month, sales_tax)]
+ 
+   applicable_tax <- merge(module_exemptions, county_monthly_tax,
+                           by = c("fips_state", "year", "month"), all = T,
+                           allow.cartesian = T)
+ 
+   applicable_tax[is.na(taxable), applicable_tax := sales_tax.y]
+   applicable_tax[taxable == 1 & is.na(sales_tax.x), applicable_tax := sales_tax.y]
+   applicable_tax[taxable == 1 & !is.na(sales_tax.x), applicable_tax := sales_tax.x]
+   applicable_tax[taxable == 0, applicable_tax := 0]
+   applicable_tax[, quarter := ceiling(month / 3)]
+   applicable_tax <- applicable_tax[, list(applicable_tax = max(applicable_tax)),
+                                    by = .(fips_state, fips_county, year, quarter,
+                                           product_module_code)]
+ 
+   taxable_pi <- merge(taxable_pi, applicable_tax,
+                       by = c("fips_state", "fips_county", "year", "quarter",
+                              "product_module_code"), all.x = T)
+ 
+   taxable_pi[, rm_missing := max(as.integer(is.na(applicable_tax))),
+              by = c("fips_state", "fips_county", "product_module_code")]
+   taxable_pi[, rm_nontaxable := max(as.integer(applicable_tax == 0)),
+              by = c("fips_state", "fips_county", "product_module_code")]
+   taxable_pi <- taxable_pi[rm_nontaxable != 1 & rm_missing != 1]
+   taxable_pi <- taxable_pi[, .(store_code_uc, quarter, year, product_group_code,
+                                product_module_code, pricei, quantityi, cpricei,
+                                fips_state, fips_county, sales)]
+ 
+   fwrite(taxable_pi, taxable_pi_path)
+ 
+   rm(county_monthly_tax, module_exemptions, applicable_tax)
+   gc()
+ }  else if (make.ct) {
+   all_pi <- fread(all_goods_pi_path)
+   taxable_pi <- fread(taxable_pi_path)
+ }
> 
> 
> ################################################################################
> ############## Plots by Calendar Time (taxable and all goods) ##################
> ################################################################################
> 
> # All goods ====================================================================
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> all_pi <- all_pi[year %in% 2008:2014 & !is.na(cpricei)]
> all_pi <- all_pi[year %in% 2009:2014 | quarter %in% 2:4 | !is.na(sales)]
> all_pi <- balance_panel_data(all_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(all_pi, time_vars = c("quarter", "year"),  :
  29184632 out of 183145932 observations dropped when balancing panel
> 
> ## normalize price index -------------------------------------------------------
> price_base <- all_pi[year == 2008 & quarter == 1]
> price_base <- price_base[, .(store_code_uc, product_module_code, cpricei, sales)]
> price_base[, base.cpricei := cpricei]
> price_base[, cpricei := NULL]
> price_base[, base.sales := sales]
> price_base[, sales := NULL]
> 
> all_pi <- merge(all_pi, price_base, by = c("store_code_uc", "product_module_code"))
> all_pi[, normalized.cpricei := log(cpricei) - log(base.cpricei)]
> all_pi[, base.cpricei := NULL]
> all_pi[, sales := NULL]
> 
> rm(price_base)
> gc()
             used    (Mb) gc trigger    (Mb)   max used    (Mb)
Ncells    1569242    83.9    2910017   155.5    2910017   155.5
Vcells 2571244764 19617.1 6438153303 49119.3 5358323225 40880.8
> 
> ## merge treatment -------------------------------------------------------------
> all_pi <- merge_treatment(original_data = all_pi,
+                           treatment_data_path = tr_groups_path,
+                           time = "calendar",
+                           merge_by = c("fips_county", "fips_state"))
> 
> ## aggregate across treatment groups -------------------------------------------
> 
> all_pi_collapsed <- all_pi[, list(
+   mean.cpricei = weighted.mean(x = normalized.cpricei, w = base.sales),
+   n_counties = uniqueN(1000 * fips_state + fips_county)
+   ), by = c("tr_group", "year", "quarter")]
> 
> all_pi_collapsed <- add_tr_count(collapsed_data = all_pi_collapsed,
+                                  tr_group_name = "tr_group",
+                                  count_col_name = "n_counties")
[1] "Warning: count not equal across years within treatment groups."
               
                266 456 457 702 703 1629 1630 1631
  Ever decrease  28   0   0   0   0    0    0    0
  Ever increase   0   0   0  16  12    0    0    0
  Increase only   0  16  12   0   0    0    0    0
  No change       0   0   0   0   0    4   16    8
> fwrite(all_pi_collapsed, "Data/pi_all_calendar.csv")
> 
> ## prepare plot-----------------------------------------------------------------
> all_pi_collapsed$year_qtr <- as.yearqtr(paste(
+   as.integer(all_pi_collapsed$year), as.integer(all_pi_collapsed$quarter)
+   ), "%Y %q")
> 
> all.calendar.plot <- ggplot(data = all_pi_collapsed, mapping = aes(x = year_qtr,
+                                                            y = mean.cpricei,
+                                                            color = tr_count)) +
+   labs(x = "Quarter", y = "Mean normalized ln(index)", color = "Sales tax change",
+        caption = "Weighted by sales in 2008 Q1.") +
+   scale_x_yearqtr(format = "%Y Q%q") +
+   geom_line() +
+   theme_bw()
> 
> ggsave("Graphs/pi_all_calendar.png")
Saving 7 x 7 in image
> 
> # Taxable goods ================================================================
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> taxable_pi <- taxable_pi[year %in% 2008:2014 & !is.na(cpricei)]
> taxable_pi <- taxable_pi[year %in% 2009:2014 | quarter %in% 2:4 | !is.na(sales)]
> taxable_pi <- balance_panel_data(taxable_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(taxable_pi, time_vars = c("quarter", "year"),  :
  17163468 out of 107101360 observations dropped when balancing panel
> 
> ## normalize price index -------------------------------------------------------
> price_base <- taxable_pi[year == 2008 & quarter == 1]
> price_base <- price_base[, .(store_code_uc, product_module_code, cpricei, sales)]
> price_base[, base.cpricei := cpricei]
> price_base[, cpricei := NULL]
> price_base[, base.sales := sales]
> price_base[, sales := NULL]
> 
> taxable_pi <- merge(taxable_pi, price_base, by = c("store_code_uc", "product_module_code"))
> taxable_pi[, normalized.cpricei := log(cpricei) - log(base.cpricei)]
> taxable_pi[, base.cpricei := NULL]
> taxable_pi[, sales := NULL]
> 
> rm(price_base)
> gc()
             used    (Mb)  gc trigger    (Mb)    max used    (Mb)
Ncells    1748795    93.4     2910017   155.5     2910017   155.5
Vcells 3381213169 25796.7 11190116045 85373.9 11188411138 85360.9
> 
> ## merge treatment -------------------------------------------------------------
> taxable_pi <- merge_treatment(original_data = taxable_pi,
+                               treatment_data_path = tr_groups_path,
+                               time = "calendar",
+                               merge_by = c("fips_county", "fips_state"))
> 
> 
> ## aggregate across treatment groups -------------------------------------------
> 
> taxable_pi_collapsed <- taxable_pi[, list(
+   mean.cpricei = weighted.mean(x = normalized.cpricei, w = base.sales),
+   n_counties = uniqueN(1000 * fips_state + fips_county)
+ ), by = c("tr_group", "year", "quarter")]
> 
> taxable_pi_collapsed <- add_tr_count(collapsed_data = taxable_pi_collapsed,
+                                      tr_group_name = "tr_group",
+                                      count_col_name = "n_counties")
[1] "Warning: count not equal across years within treatment groups."
               
                266 456 457 702 703 1559 1560 1561
  Ever decrease  28   0   0   0   0    0    0    0
  Ever increase   0   0   0  16  12    0    0    0
  Increase only   0  16  12   0   0    0    0    0
  No change       0   0   0   0   0    4   16    8
> fwrite(taxable_pi_collapsed, "Data/taxable_pi_collapsed.csv")
> 
> ## prepare plot-----------------------------------------------------------------
> taxable_pi_collapsed$year_qtr <- as.yearqtr(paste(
+   as.integer(taxable_pi_collapsed$year), as.integer(taxable_pi_collapsed$quarter)
+ ), "%Y %q")
> 
> taxable.calendar.plot <- ggplot(taxable_pi_collapsed, aes(x = year_qtr,
+                                                           y = mean.cpricei,
+                                                           color = tr_count)) +
+   labs(x = "Quarter", y = "Mean normalized ln(index)", color = "Sales tax change",
+        caption = "Weighted by sales in 2008 Q1.") +
+   scale_x_yearqtr(format = "%Y Q%q") +
+   geom_line() +
+   theme_bw()
> 
> ggsave("Graphs/pi_taxable_calendar.png")
Saving 7 x 7 in image
> 
> rm(all_pi, taxable_pi)
> gc()
            used   (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells   1750243   93.5    2910017   155.5     2910017   155.5
Vcells 525629983 4010.3 8952092836 68299.1 11188411138 85360.9
> 
> ################################################################################
> ################ Plots by Event Time (taxable and all goods) ###################
> ################################################################################
> 
> # All goods ====================================================================
> all_pi <- fread(all_goods_pi_path)
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> all_pi <- all_pi[year %in% 2008:2014 & !is.na(cpricei)]
> 
> base_sales <- all_pi[year == 2008 & quarter == 1]
> base_sales[, base.sales := sales]
> base_sales <- base_sales[, .(store_code_uc, product_module_code, base.sales)]
> 
> all_pi <- merge(all_pi, base_sales, by = c("store_code_uc", "product_module_code"))
> all_pi[, sales := NULL]
> all_pi <- all_pi[!is.na(base.sales)]
> 
> rm(base_sales)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1750332    93.5    2910017   155.5     2910017   155.5
Vcells 2117940415 16158.7 7161674268 54639.3 11188411138 85360.9
> 
> all_pi <- balance_panel_data(all_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(all_pi, time_vars = c("quarter", "year"),  :
  12679688 out of 158883668 observations dropped when balancing panel
> 
> all_pi[, cpricei := log(cpricei)]
> 
> all_pi_original <- copy(all_pi)
> 
> ## merge treatment, attach event times -----------------------------------------
> all_pi <- merge_treatment(original_data = all_pi,
+                           treatment_data_path = eventstudy_tr_path,
+                           merge_by = c("fips_county", "fips_state"))
> 
> setnames(all_pi, "V1", "event_ID")
> 
> ## define time to event --------------------------------------------------------
> all_pi[, ref_quarter := ceiling(ref_month / 3)]
> all_pi[, tt_event := as.integer(4 * year + quarter -
+                                    (4 * ref_year + ref_quarter))]
> 
> ## limit data to two year window around reform ---------------------------------
> all_pi <- all_pi[tt_event >= -4 & tt_event <= 4]
> 
> ## add pseudo-control group ----------------------------------------------------
> 
> ### create unique dataset of never treated counties
> control_counties <- fread(tr_groups_path)
> control_counties <- control_counties[tr_group == "No change"]
> control_counties <- unique(control_counties[, .(fips_county, fips_state)])
> control_dt <- merge(all_pi_original, control_counties,
+                     by = c("fips_state", "fips_county"))
> 
> rm(all_pi_original, base_sales)
Warning message:
In rm(all_pi_original, base_sales) : object 'base_sales' not found
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1750494    93.5    2910017   155.5     2910017   155.5
Vcells 2131349213 16261.0 9900531467 75535.1 11188411138 85360.9
> 
> ### take the mean for each time period
> control_dt <- control_dt[,
+                          list(control.cpricei = weighted.mean(x = cpricei, w = base.sales)),
+                          by = .(quarter, year)
+                          ]
> 
> matched_control_data <- merge(all_pi, control_dt, by = c("quarter", "year"))
> matched_control_data <- matched_control_data[, .(control.cpricei, tt_event, event_ID,
+                                                  store_code_uc, product_module_code,
+                                                  tr_group, base.sales, ref_year, ref_quarter)]
> 
> matched_control_data[, cpricei := control.cpricei]
> matched_control_data[, tr_group := paste0("No change (", tolower(tr_group), ")")]
> matched_control_data[, control.cpricei := NULL]
> 
> all_pi <- rbind(all_pi, matched_control_data, fill = T)
> 
> ## normalize price indices based on time to event ------------------------------
> price_anchors <- all_pi[tt_event == -2]
> price_anchors[, base_price := cpricei]
> price_anchors <- price_anchors[, .(store_code_uc, product_module_code, base_price,
+                                    ref_year, ref_quarter, tr_group, event_ID)]
> 
> all_pi <- merge(all_pi, price_anchors,
+                     by = c("store_code_uc", "product_module_code",
+                            "ref_year", "ref_quarter", "tr_group", "event_ID"))
> 
> # note that this is still log cpricei
> all_pi[, normalized.cpricei := cpricei - base_price]
> all_pi[, base_price := NULL]
> 
> ## aggregate by treatment group ------------------------------------------------
> all_pi_es_collapsed <- all_pi[,
+   list(mean_pi = weighted.mean(x = normalized.cpricei, w = base.sales),
+        n_counties = uniqueN(1000 * fips_state + fips_county),
+        n_stores = uniqueN(store_code_uc)),
+    by = c("tr_group", "tt_event")
+   ]
> 
> all_pi_es_collapsed <- add_tr_count(collapsed_data = all_pi_es_collapsed,
+                                     tr_group_name = "tr_group",
+                                     count_col_name = "n_counties")
> 
> fwrite(all_pi_es_collapsed, "Data/pi_allgoods_es.csv")
> 
> ## plot and export result ------------------------------------------------------
> all_pi_es_plot <- ggplot(data = all_pi_es_collapsed,
+                   mapping = aes(x = tt_event, y = mean_pi, color = tr_count)) +
+   labs(x = "Time to event",
+        y = "Log normalized price index",
+        color = "Sales tax change",
+        caption = expression(paste("Weighted by sales in 2008 Q1. ", Y==0, " in ", T==-2))) +
+   geom_line() +
+   theme_bw()
> 
> ggsave("Graphs/pi_allgoods_es.png")
Saving 7 x 7 in image
> 
> rm(all_pi)
> gc()
             used   (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751179   93.6    2910017   155.5     2910017   155.5
Vcells 1298841728 9909.4 7920425173 60428.1 11188411138 85360.9
> 
> 
> # Taxable goods only ===========================================================
> taxable_pi <- fread(taxable_pi_path)
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> taxable_pi <- taxable_pi[year %in% 2008:2014 & !is.na(cpricei)]
> 
> base_sales <- taxable_pi[year == 2008 & quarter == 1]
> base_sales[, base.sales := sales]
> base_sales <- base_sales[, .(store_code_uc, product_module_code, base.sales)]
> 
> taxable_pi <- merge(taxable_pi, base_sales, by = c("store_code_uc", "product_module_code"))
> taxable_pi[, sales := NULL]
> taxable_pi <- taxable_pi[!is.na(base.sales)]
> 
> rm(base_sales)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751269    93.6    2910017   155.5     2910017   155.5
Vcells 2126794448 16226.2 6336340138 48342.5 11188411138 85360.9
> 
> taxable_pi <- balance_panel_data(taxable_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(taxable_pi, time_vars = c("quarter", "year"),  :
  7588756 out of 94137068 observations dropped when balancing panel
> 
> taxable_pi[, cpricei := log(cpricei)]
> taxable_pi_original <- copy(taxable_pi)
> 
> ## merge treatment, attach event times -----------------------------------------
> taxable_pi <- merge_treatment(original_data = taxable_pi,
+                           treatment_data_path = eventstudy_tr_path,
+                           merge_by = c("fips_county", "fips_state"))
> 
> setnames(taxable_pi, "V1", "event_ID")
> 
> ## define time to event --------------------------------------------------------
> taxable_pi[, ref_quarter := ceiling(ref_month / 3)]
> taxable_pi[, tt_event := as.integer(4 * year + quarter -
+                                   (4 * ref_year + ref_quarter))]
> 
> ## limit data to two year window around reform ---------------------------------
> taxable_pi <- taxable_pi[tt_event >= -4 & tt_event <= 4]
> 
> ## add pseudo-control group ----------------------------------------------------
> 
> ### create unique dataset of never treated counties
> control_counties <- fread(tr_groups_path)
> control_counties <- control_counties[tr_group == "No change"]
> control_counties <- unique(control_counties[, .(fips_county, fips_state)])
> control_dt <- merge(taxable_pi_original, control_counties,
+                     by = c("fips_state", "fips_county"))
> 
> rm(taxable_pi_original)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751293    93.6    2910017   155.5     2910017   155.5
Vcells 2139320371 16321.8 6082950532 46409.3 11188411138 85360.9
> 
> ### take the mean for each time period
> control_dt <- control_dt[,
+                          list(control.cpricei = weighted.mean(x = cpricei, w = base.sales)),
+                          by = .(quarter, year)
+                          ]
> 
> matched_control_data <- merge(taxable_pi, control_dt, by = c("quarter", "year"))
> matched_control_data <- matched_control_data[, .(control.cpricei, tt_event, event_ID,
+                                                  store_code_uc, product_module_code,
+                                                  tr_group, base.sales, ref_year, ref_quarter)]
> 
> matched_control_data[, cpricei := control.cpricei]
> matched_control_data[, tr_group := paste0("No change (", tolower(tr_group), ")")]
> matched_control_data[, control.cpricei := NULL]
> 
> taxable_pi <- rbind(taxable_pi, matched_control_data, fill = T)
> 
> ## normalize price indices based on time to event ------------------------------
> price_anchors <- taxable_pi[tt_event == -2]
> price_anchors[, base_price := cpricei]
> price_anchors <- price_anchors[, .(store_code_uc, product_module_code, base_price,
+                                    ref_year, ref_quarter, tr_group, event_ID)]
> 
> taxable_pi <- merge(taxable_pi, price_anchors,
+                 by = c("store_code_uc", "product_module_code",
+                        "ref_year", "ref_quarter", "tr_group", "event_ID"))
> 
> # note that this is still log cpricei
> taxable_pi[, normalized.cpricei := cpricei - base_price]
> taxable_pi[, base_price := NULL]
> 
> ## aggregate by treatment group ------------------------------------------------
> taxable_pi_es_collapsed <- taxable_pi[,
+                               list(mean_pi = weighted.mean(x = normalized.cpricei, w = base.sales),
+                                    n_counties = uniqueN(1000 * fips_state + fips_county),
+                                    n_stores = uniqueN(store_code_uc)),
+                               by = c("tr_group", "tt_event")
+                               ]
> 
> taxable_pi_es_collapsed <- add_tr_count(collapsed_data = taxable_pi_es_collapsed,
+                                     tr_group_name = "tr_group",
+                                     count_col_name = "n_counties")
> 
> fwrite(taxable_pi_es_collapsed, "Data/pi_taxable_es.csv")
> 
> ## plot and export result ------------------------------------------------------
> taxable_pi_es_plot <- ggplot(data = taxable_pi_es_collapsed,
+                          mapping = aes(x = tt_event, y = mean_pi, color = tr_count)) +
+   labs(x = "Time to event",
+        y = "Log normalized price index",
+        color = "Sales tax change",
+        caption = expression(paste("Weighted by sales in 2008 Q1. ", Y==0, " in ", T==-2))) +
+   geom_line() +
+   theme_bw()
> 
> ggsave("Graphs/pi_taxable_es.png")
Saving 7 x 7 in image
> 
> rm(taxable_pi)
> gc()
             used   (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751909   93.6    2910017   155.5     2910017   155.5
Vcells 1294896915 9879.3 4866360425 37127.4 11188411138 85360.9
> 
> # Tax exempt goods =============================================================
> 
> ## get data.table of tax exempt goods ------------------------------------------
> all_pi <- fread(all_goods_pi_path)
> taxable_pi <- fread(taxable_pi_path)
> 
> taxable_pi <- taxable_pi[, .(store_code_uc, product_module_code, quarter, year)]
> taxable_pi[, flag := 1]
> 
> all_pi <- merge(all_pi, taxable_pi, all.x = T)
> all_pi[is.na(flag), flag := 0]
> 
> taxexempt_pi <- all_pi[flag != 1]
> 
> rm(all_pi, taxable_pi)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751934    93.6    2910017   155.5     2910017   155.5
Vcells 3302584062 25196.8 8889342870 67820.4 11188411138 85360.9
> 
> ## balance sample on store-level from 2008 to 2014 -----------------------------
> taxexempt_pi <- taxexempt_pi[year %in% 2008:2014 & !is.na(cpricei)]
> 
> base_sales <- taxexempt_pi[year == 2008 & quarter == 1]
> base_sales[, base.sales := sales]
> base_sales <- base_sales[, .(store_code_uc, product_module_code, base.sales)]
> 
> taxexempt_pi <- merge(taxexempt_pi, base_sales, by = c("store_code_uc", "product_module_code"))
> taxexempt_pi[, sales := NULL]
> 
> rm(base_sales)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751985    93.6    2910017   155.5     2910017   155.5
Vcells 2367807767 18065.0 7111474296 54256.3 11188411138 85360.9
> 
> taxexempt_pi <- taxexempt_pi[!is.na(base.sales)]
> taxexempt_pi <- balance_panel_data(taxexempt_pi, time_vars = c("quarter", "year"),
+                              panel_unit = "store_code_uc", n_periods = 28)
Warning message:
In balance_panel_data(taxexempt_pi, time_vars = c("quarter", "year"),  :
  5095868 out of 64745972 observations dropped when balancing panel
> 
> taxexempt_pi[, cpricei := log(cpricei)]
> taxexempt_pi_original <- copy(taxexempt_pi)
> 
> ## merge treatment, attach event times -----------------------------------------
> taxexempt_pi <- merge_treatment(original_data = taxexempt_pi,
+                           treatment_data_path = eventstudy_tr_path,
+                           merge_by = c("fips_county", "fips_state"))
> 
> setnames(taxexempt_pi, "V1", "event_ID")
> 
> ## define time to event --------------------------------------------------------
> taxexempt_pi[, ref_quarter := ceiling(ref_month / 3)]
> taxexempt_pi[, tt_event := as.integer(4 * year + quarter -
+                                   (4 * ref_year + ref_quarter))]
> 
> ## limit data to two year window around reform ---------------------------------
> taxexempt_pi <- taxexempt_pi[tt_event >= -4 & tt_event <= 4]
> 
> ## add pseudo-control group ----------------------------------------------------
> 
> ### create unique dataset of never treated counties
> control_counties <- fread(tr_groups_path)
> control_counties <- control_counties[tr_group == "No change"]
> control_counties <- unique(control_counties[, .(fips_county, fips_state)])
> control_dt <- merge(taxexempt_pi_original, control_counties,
+                     by = c("fips_state", "fips_county"))
> 
> rm(taxexempt_pi_original)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1751946    93.6    2910017   155.5     2910017   155.5
Vcells 2359903037 18004.7 7111474296 54256.3 11188411138 85360.9
> 
> ### take the mean for each time period
> control_dt <- control_dt[,
+                          list(control.cpricei = weighted.mean(x = cpricei, w = base.sales)),
+                          by = .(quarter, year)
+                          ]
> 
> matched_control_data <- merge(taxexempt_pi, control_dt, by = c("quarter", "year"))
> matched_control_data <- matched_control_data[, .(control.cpricei, tt_event, event_ID,
+                                                  store_code_uc, product_module_code,
+                                                  tr_group, base.sales, ref_year, ref_quarter)]
> 
> matched_control_data[, cpricei := control.cpricei]
> matched_control_data[, tr_group := paste0("No change (", tolower(tr_group), ")")]
> matched_control_data[, control.cpricei := NULL]
> 
> taxexempt_pi <- rbind(taxexempt_pi, matched_control_data, fill = T)
> 
> ## normalize price indices based on time to event ------------------------------
> price_anchors <- taxexempt_pi[tt_event == -2]
> price_anchors[, base_price := cpricei]
> price_anchors <- price_anchors[, .(store_code_uc, product_module_code, base_price,
+                                    ref_year, ref_quarter, tr_group, event_ID)]
> 
> taxexempt_pi <- merge(taxexempt_pi, price_anchors,
+                 by = c("store_code_uc", "product_module_code",
+                        "ref_year", "ref_quarter", "tr_group", "event_ID"))
> 
> # note that this is still log cpricei
> taxexempt_pi[, normalized.cpricei := cpricei - base_price]
> taxexempt_pi[, base_price := NULL]
> 
> ## aggregate by treatment group ------------------------------------------------
> taxexempt_pi_es_collapsed <- taxexempt_pi[,
+                               list(mean_pi = weighted.mean(x = normalized.cpricei, w = base.sales),
+                                    n_counties = uniqueN(1000 * fips_state + fips_county),
+                                    n_stores = uniqueN(store_code_uc)),
+                               by = c("tr_group", "tt_event")
+                               ]
> 
> taxexempt_pi_es_collapsed <- add_tr_count(collapsed_data = taxexempt_pi_es_collapsed,
+                                     tr_group_name = "tr_group",
+                                     count_col_name = "n_counties")
> 
> fwrite(taxexempt_pi_es_collapsed, "Data/pi_taxexempt_es.csv")
> 
> ## plot and export result ------------------------------------------------------
> taxexempt_pi_es_plot <- ggplot(data = taxexempt_pi_es_collapsed,
+                          mapping = aes(x = tt_event, y = mean_pi, color = tr_count)) +
+   labs(x = "Time to event",
+        y = "Log normalized price index",
+        color = "Sales tax change",
+        caption = expression(paste("Weighted by sales in 2008 Q1. ", Y==0, " in ", T==-2))) +
+   geom_line() +
+   theme_bw()
> 
> ggsave("Graphs/pi_taxexempt_es.png")
Saving 7 x 7 in image
> 
> rm(taxexempt_pi)
> gc()
             used    (Mb) gc trigger    (Mb)    max used    (Mb)
Ncells    1752634    93.7    2910017   155.5     2910017   155.5
Vcells 1696603872 12944.1 5689179436 43405.0 11188411138 85360.9
> 
> proc.time()
    user   system  elapsed 
1370.228  514.120 1909.039 
